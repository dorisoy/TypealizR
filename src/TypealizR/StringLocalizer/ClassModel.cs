using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Runtime.InteropServices.ComTypes;
using System.Xml;
using Microsoft.CodeAnalysis;

namespace TypealizR.StringLocalizer;

internal class ClassModel
{
    private readonly TypeModel target;
	private readonly string members;

    private readonly HashSet<string> usings = new()
    {
        "System.CodeDom.Compiler",
        "System.Diagnostics",
        "System.Diagnostics.CodeAnalysis"
    };

    public IEnumerable<string> Usings => usings;
	public IEnumerable<MethodModel> Methods { get; }
    public IEnumerable<Diagnostic> Diagnostics { get; }

    private readonly string usingDirectives;

	public ClassModel(TypeModel target, string rootNamespace, IEnumerable<MethodModel> methods, IEnumerable<Diagnostic> warningsAndErrors)
    {
        this.target = target;
		Methods = methods;
		Diagnostics = warningsAndErrors;
		members = string.Join("\r", methods
            .Select(x => x.Declaration)
            .ToArray()
        );

        usings.Add(rootNamespace);
		usings.Add(target.Namespace);

        usingDirectives = string.Join("\r", usings.Select(x => $"using {x};"));
	}

    public string FileName => $"IStringLocalizerExtensions_{target.FullName}.g.cs";

    public string Body => $@"
// <auto-generated/>
{usingDirectives}
namespace Microsoft.Extensions.Localization {{

    {_.GeneratedCodeAttribute}
    [DebuggerStepThrough]
    internal static partial class IStringLocalizerExtensions_{target.Name}
    {{
    {members}
    }}
}}";

}