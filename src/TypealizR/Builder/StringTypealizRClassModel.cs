using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using TypealizR.Extensions;

namespace TypealizR.Builder;
internal class StringTypealizRClassModel
{
    public IEnumerable<string> Usings => usings;
    public string Visibility => Target.Visibility.ToString().ToLower();
	public string TypeName => $"StringTypealizR_{Target.FullNameForClassName}";
	public IEnumerable<IMemberModel> Members { get; }

	public readonly TypeModel Target;
	private readonly List<string> groups;
	private readonly HashSet<string> usings = new()
    {
		"TypealizR.Abstractions"
	};

    public IEnumerable<Diagnostic> Diagnostics { get; }

	public StringTypealizRClassModel(TypeModel target, string rootNamespace, IEnumerable<IMemberModel> members, List<string> groups, IEnumerable<Diagnostic> diagnostics)
    {
		Target = target;
        usings.Add(rootNamespace);
		Members = members;
		this.groups = groups;
		Diagnostics = diagnostics;
    }

	public string FileName => $"StringTypealizR_{Target.FullName}.g.cs";

	public string ToCSharp(Type generatorType) => $$"""
        // <auto-generated/>
        {{Usings.Select(x => $"using {x};").ToMultiline(appendNewLineAfterEach: false)}}
        namespace {{Target.Namespace}}.TypealizR
        {

            {{generatorType.GeneratedCodeAttribute()}}
            {{Visibility}} partial class {{TypeName}} : IStringTypealizR<{{Target.Name}}>
            {

                private readonly IStringLocalizer<{{Target.Name}}> localizer;
                public {{TypeName}}(IStringLocalizer<{{Target.Name}}> localizer)
                {
                    this.localizer = localizer;
                    {{groups.Select(x => $"{x} = new {x}Group(localizer);").ToMultiline("            ", appendNewLineAfterEach: false)}}
                }

                {{Members.Select(x => x.ToCSharp()).ToMultiline()}}

                {{groups.Select(x => $"public {x}Group {x} {{ get; }}").ToMultiline("        ", appendNewLineAfterEach: false)}}

            }
        }

        """;
}