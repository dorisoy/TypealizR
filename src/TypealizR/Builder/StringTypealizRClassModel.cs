using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using TypealizR.Extensions;

namespace TypealizR.Builder;
internal class StringTypealizRClassModel
{
    public IEnumerable<string> Usings => usings;
    public string Visibility => Target.Visibility.ToString().ToLower();
	public IEnumerable<IMemberModel> Members { get; }

	private readonly string typeName;
	public readonly TypeModel Target;
	private readonly IEnumerable<StringTypealizRClassModel> groups;
	private readonly HashSet<string> usings = new()
    {
		"TypealizR.Abstractions"
	};

    public IEnumerable<Diagnostic> Diagnostics { get; }

	public StringTypealizRClassModel(string typeName, TypeModel target, string rootNamespace, IEnumerable<IMemberModel> members, IEnumerable<StringTypealizRClassModel> groups, IEnumerable<Diagnostic> diagnostics)
    {
		this.typeName = typeName;
		Target = target;
        usings.Add(rootNamespace);
		Members = members;
		this.groups = groups;
		Diagnostics = diagnostics;
    }

	public string FileName => $"StringTypealizR_{Target.FullName}.g.cs";


    public string ToNestedCsharp(Type generatorType) => $$"""

        {{generatorType.GeneratedCodeAttribute()}}
        {{Visibility}} partial class {{typeName}}Group
        {

            private readonly IStringLocalizer<{{Target.Name}}> localizer;
            [DebuggerStepThrough]
            public {{typeName}}Group(IStringLocalizer<{{Target.Name}}> localizer)
            {
                this.localizer = localizer;
                {{groups.Select(x => $"{x.typeName} = new {x.typeName}Group(localizer);").ToMultiline("            ", appendNewLineAfterEach: false)}}
            }

            {{Members.Select(x => x.ToCSharp()).ToMultiline()}}
    
            {{groups.Select(x => $"public {x.typeName}Group {x.typeName} {{ get; }}").ToMultiline("        ", appendNewLineAfterEach: false)}}

            {{groups.Select(x => x.ToNestedCsharp(generatorType)).ToMultiline("        ", appendNewLineAfterEach: false)}}
        }
    """;


	public string ToCSharp(Type generatorType) => $$"""
        // <auto-generated/>
        {{Usings.Select(x => $"using {x};").ToMultiline(appendNewLineAfterEach: false)}}
        namespace {{Target.Namespace}}.TypealizR
        {

            {{generatorType.GeneratedCodeAttribute()}}
            {{Visibility}} partial class {{typeName}} : IStringTypealizR<{{Target.Name}}>
            {

                private readonly IStringLocalizer<{{Target.Name}}> localizer;
                public {{typeName}}(IStringLocalizer<{{Target.Name}}> localizer)
                {
                    this.localizer = localizer;
                    {{groups.Select(x => $"{x.typeName} = new {x.typeName}Group(localizer);").ToMultiline("            ", appendNewLineAfterEach: false)}}
                }

                {{Members.Select(x => x.ToCSharp()).ToMultiline()}}

                {{groups.Select(x => $"public {x.typeName}Group {x.typeName} {{ get; }}").ToMultiline("        ", appendNewLineAfterEach: false)}}

            }

            {{groups.Select(x => x.ToNestedCsharp(generatorType)).ToMultiline("        ", appendNewLineAfterEach: false)}}
        }

        """;
}