using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices.ComTypes;
using System.Xml;
using Microsoft.CodeAnalysis;
using TypealizR.Extensions;

namespace TypealizR.Builder;
internal class ExtensionClassModel
{
    public IEnumerable<string> Usings => usings;

    public readonly TypeModel Target;
	private readonly IEnumerable<ExtensionMethodModel> methods;
	private readonly HashSet<string> usings = new()
    {
        "System.CodeDom.Compiler",
        "System.Diagnostics",
        "System.Diagnostics.CodeAnalysis"
    };

	public ExtensionClassModel(TypeModel target, string rootNamespace, IEnumerable<ExtensionMethodModel> methods)
    {
		Target = target;
		this.methods = methods;
		usings.Add(rootNamespace);
		usings.Add(target.Namespace);
		this.methods = methods;
    }

	public string FileName => $"IStringLocalizerExtensions_{Target.FullName}.g.cs";

	public string ToCSharp(Type generatorType) => $$"""
        // <auto-generated/>
        {{Usings.Select(x => $"using {x};").ToMultiline()}}
        namespace Microsoft.Extensions.Localization
        {

            {{generatorType.GeneratedCodeAttribute()}}
            {{Target.Visibility.ToString().ToLower()}} static partial class IStringLocalizerExtensions_{{Target.FullNameForClassName}}
            {

                {{methods.Select(x => x.ToCSharp()).ToMultiline()}}

            }
        }
        """;
}