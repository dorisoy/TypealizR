using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices.ComTypes;
using System.Xml;
using Microsoft.CodeAnalysis;

namespace TypealizR.Builder;
internal class ClassModel
{
    public IEnumerable<string> Usings => usings;
    public string Visibility => Target.Visibility.ToString().ToLower();
	public string TypeName => $"IStringLocalizerExtensions_{Target.FullNameForExtensionsClass}";

	public IEnumerable<MethodModel> Methods { get; }

    public readonly TypeModel Target;

    private readonly HashSet<string> usings = new()
    {
        "System.CodeDom.Compiler",
        "System.Diagnostics",
        "System.Diagnostics.CodeAnalysis"
    };

    public IEnumerable<Diagnostic> Diagnostics { get; }


	public ClassModel(TypeModel target, string rootNamespace, IEnumerable<MethodModel> methods, IEnumerable<Diagnostic> warningsAndErrors)
    {
		Target = target;
		Methods = methods;
		Diagnostics = warningsAndErrors;

        usings.Add(rootNamespace);
		usings.Add(target.Namespace);
    }

	public string FileName => $"IStringLocalizerExtensions_{Target.FullName}.g.cs";

	public string ToCSharp() => $$"""
        // <auto-generated/>
        {{Usings.Select(x => $"using {x};").ToMultiline()}}
        namespace Microsoft.Extensions.Localization 
        {

            {{_.GeneratedCodeAttribute}}
            [DebuggerStepThrough]
            {{Visibility}} static partial class {{TypeName}} 
            {

                {{Methods.Select(x => x.ToCSharp()).ToMultiline()}}

            }
        }
        """;
}